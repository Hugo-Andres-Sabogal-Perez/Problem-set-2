#### Modelos problem set 2 ####
# Realizamos inicialmente una limpieza del entorno
rm(list = ls())
# Set directory:
setwd(substr(getwd(), 1, nchar(getwd()) - 8))
# Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
train_H<-import('Stores/EHstd.csv')
test_H<-import('Stores/THstd.csv')
View(test_H)
View(train_H)
View(train_H)
View(test_H)
train_H<- train_H %>%
mutate(Pobre=as.factor(Pobre))
train_H<- train_H %>%
mutate(Pobre=as.factor(Pobre))
typeof(train_H$Pobre)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre))
typeof(train_H$Pobre)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1)))
typeof(train_H$Pobre)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),,labels=c("No","Yes")))
typeof(train_H$Pobre)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
typeof(train_H$Pobre)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
train_H<-import('Stores/EHstd.csv')
test_H<-import('Stores/THstd.csv')
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
typeof(train_H$Pobre)
class(train_H$Pobre)
class(5.4)
typeof(.4)
train_H[, 14:ncol(train_H)] <- lapply(train_H[, 14:ncol(train_H)], factor)
class(train_H$P6090)
test_H<- test_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
rm(list = ls())
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
##Impotar bases de datoa limpias
train_H<-import('Stores/EHstd.csv')
test_H<-import('Stores/THstd.csv')
#Convierto en facotores la categoricas para training
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
train_H[, 16:ncol(train_H)] <- lapply(train_H[, 14:ncol(train_H)], factor)
train_H[, 16:ncol(train_H)] <- lapply(train_H[, 14:ncol(train_H)], factor)
train_H[, 16:ncol(train_H)] <- lapply(train_H[, 16:ncol(train_H)], factor)
class(train_H$P6090)
View(train_H)
train_H[, 15:ncol(train_H)] <- lapply(train_H[, 15:ncol(train_H)], factor)
class(train_H$P6090)
train_H[, 14:ncol(train_H)] <- lapply(train_H[, 14:ncol(train_H)], factor)
class(train_H$P6090)
class(test_H$P6090)
train_H[, 13:ncol(train_H)] <- lapply(train_H[, 13:ncol(train_H)], factor)
class(test_H$P6090)
View(test_H)
class(test_H$P6090)
train_H[, 12:ncol(train_H)] <- lapply(train_H[, 13:ncol(train_H)], factor)
train_H[, 12:ncol(train_H)] <- lapply(train_H[, 12:ncol(train_H)], factor)
class(test_H$P6090)
train_H[, 11:ncol(train_H)] <- lapply(train_H[, 11:ncol(train_H)], factor)
class(test_H$P6090)
test_H[, 14:ncol(test_H)] <- lapply(test_H[, 14:ncol(test_H)], factor)
class(test_H$P6090)
test_H[, 13:ncol(test_H)] <- lapply(test_H[, 13:ncol(test_H)], factor)
class(test_H$P6090)
ctrl<- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
savePredictions = T)
set.seed(098063)
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
train_Hpobre
train_H$pobre
train_H$Pobre
is.na(train_H$Pobre)
any(is.na(train_H$Pobre))
ctrl<- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
savePredictions = T)
set.seed(098063)
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
is.na(train_H$P6090)
any(is.na(train_H$P6090))
any(is.na(train_H$arrypen))
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
na.action = na.omit,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
install.packages("DMwR")
require(DMwR)
rm(list = ls())
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
train_H<-import('Stores/EHstd.csv')
test_H<-import('Stores/THstd.csv')
train_H <- knnImputation(train_H)
install.packages("Hmisc")
install.packages("Hmisc")
?knnImputation()
??knnImputation()
train_H <- hotdeck(train_H)
View(train_H)
test_H <- hotdeck(test_H)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
train_H[, 15:ncol(train_H)] <- lapply(train_H[, 15:ncol(train_H)], factor)
class(train_H$P6090)
#Convierto en facotores la categoricas para test
test_H[, 13:ncol(test_H)] <- lapply(test_H[, 13:ncol(test_H)], factor)
ctrl<- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
savePredictions = T)
set.seed(098063)
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
na.action = na.omit,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
# Realizamos inicialmente una limpieza del entorno
rm(list = ls())
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
##Impotar bases de datoa limpias
train_H<-import('Stores/EHstd.csv')
test_H<-import('Stores/THstd.csv')
train_H <- hotdeck(train_H)
test_H <- hotdeck(test_H)
#Configuracion de cross validation
ctrl<- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
savePredictions = T)
set.seed(098063)
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
train_H[, 15:ncol(train_H)] <- lapply(train_H[, 15:ncol(train_H)], factor)
class(train_H$P6090)
#Convierto en facotores la categoricas para test
test_H[, 13:ncol(test_H)] <- lapply(test_H[, 13:ncol(test_H)], factor)
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
##Impotar bases de datoa limpias
train_H<-import('Stores/EHstd.csv')
test_H<-import('Stores/THstd.csv')
train_H <- hotdeck(train_H)
test_H <- hotdeck(test_H)
train_H<- train_H %>%
mutate(Pobre=factor(Pobre,levels=c(0,1),labels=c("No","Yes")))
train_H[, 15:ncol(train_H)] <- lapply(train_H[, 15:ncol(train_H)], factor)
#Convierto en facotores la categoricas para test
test_H[, 13:ncol(test_H)] <- lapply(test_H[, 13:ncol(test_H)], factor)
#Configuracion de cross validation
ctrl<- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
savePredictions = T)
set.seed(098063)
#Elastic net
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
View(train_H)
View(train_H)
modelO1 <- train(Pobre~.,
data=train_H,
metric = "F1",
method = "glmnet",
trControl = ctrl,
tuneGrid=expand.grid(
alpha = seq(0,1,by=.2),
lambda =10^seq(10, -2, length = 10)
)
)
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
source("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2/Scripts/modelaje.R")
