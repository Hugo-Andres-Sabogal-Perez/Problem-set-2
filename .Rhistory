EH = read.table()
rm(list = ls())
# Set directory:
setwd('/Users/juansilva/Documents/GitHub/Problem-set-2')
rm(list = ls())
# Set directory:
# Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
# Importar la base de datos:
EH = read.table(unz("Stores/train_hogares.csv.zip", "train_hogares.csv"), header=T, sep=",")
rm(list = ls())
# Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
install.packages(leans)
install.packages(leas)
install.packages(leaps)
H = read.table(unz("Stores/train_hogares.csv.zip", "train_hogares.csv"), header=T, sep=",")
rm(list = ls())
rm(list = ls())
# Set directory:
setwd("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2")
rm(list = ls())
# Set directory:
setwd("C:/Users/hugos/OneDrive - Universidad de los andes/contenido semestres/9 semestre/Big data y machine learning/talleres/taller 2/github/Problem-set-2")
# Llamamos las librerías necesarias para la realización del trabajo
require(pacman)
require(tidyverse)
require(rvest)
require(stargazer)
require(rio)
require(caret)
require(gridExtra)
require(skimr)
require(boot)
require(tidytable)
require(VIM)
require(leaps)
require(margins)
#Importamos bases de datos
EH = read.table(unz("Stores/train_hogares.csv.zip", "train_hogares.csv"), header=T, sep=",")
EP = read.table(unz("Stores/train_personas.csv.zip", "train_personas.csv"), header=T, sep=",")
TH = read.table(unz("Stores/test_hogares.csv.zip", "test_hogares.csv"), header=T, sep=",")
TP = read.table(unz("Stores/test_personas.csv.zip", "test_personas.csv"), header=T, sep=",")
#Identificación de las variables dependientes que se utilizan para el desarrollo del trabajo
VarDep_train = EH %>% select(id,Pobre,Ingpcug)
#Vamos a dejar las mismas variables tanto en la base de entrenamiento como en la base de prueba
EH = EH %>% select(colnames(TH))
#Ahora para las bases de datos de personas
EP = EP %>% select(colnames(TP))
#Inicialmente manipulamos las bases de datos de personas (tanto de entranmiento como de prueba)
#Eliminamos todas las observaciones que tengan la categoría =9
#Base de entrenamiento:
nueve = c('P7510s7', 'P7510s6', 'P7510s5', 'P7510s3', 'P7510s2', 'P7510s1', 'P7500s3', 'P7500s2', 'P6620',
'P6610', 'P6600', 'P6590', 'P6585s4', 'P6585s3', 'P6585s2', 'P6585s1', 'P6580', 'P6545', 'P6510', 'P6090')
data_nueve<-EP %>% select(all_of(nueve))
frecuencia_nueve <- lapply(data_nueve, table)
frecuencia_nueve #La tabla de frecuencia solo se realiza para identificar que efectivamente se hayan tomado las observaciones correctas.
# Se perdió unicamente un 0.043% de las observaciones
for(var in nueve){
EP = EP %>% filter(.data[[var]] != 9 | is.na(.data[[var]]))
}
#Base de prueba:
for(var in nueve){
TP = TP %>% filter(.data[[var]] != 9 | is.na(.data[[var]]))
}
#Filtrar la variable Oficio solo para el jefe de hogar, para analizar el % de missings más adelante
Of_jefe = EP %>% filter(P6050 == 1)
#Tabla de estadísticas descriptivas para las variables, únicamente por jefe del hogar
jefe <- length(colnames(Of_jefe))
descEP_jefe <- data.frame("Variable" = colnames(Of_jefe), "Missings" = rep(NA, jefe), "Media" = rep(NA, jefe), "Desviacion Estandard" = rep(NA, jefe))
for (col in colnames(Of_jefe)) {
df <- Of_jefe %>% select(col)
NAs <- sum(is.na(df))/nrow(Of_jefe)
mean <- mean(as.numeric(unlist(df)), na.rm = T)
sd <- sqrt(var(df, na.rm = T))
descEP_jefe[descEP_jefe$Variable == col, 2] <- NAs
descEP_jefe[descEP_jefe$Variable == col, 3] <- mean
descEP_jefe[descEP_jefe$Variable == col, 4] <- sd
}
#De la nueva base de datos exclusiva para los jefes de hogar, se eliminarán las var con más del 30% de missing values.
descEP_jefe = descEP_jefe[descEP_jefe$Missings < .3,]
miss_jef = descEP_jefe$Variable[descEP_jefe$Missings < .3]
Of_jefe = Of_jefe  %>% select(all_of(miss_jef))
#Tabla de estadísticas descriptivas importantes para elegir buenas variables y comparar con la tabla de jefes de hogar
vars <- length(colnames(EP))
descEP <- data.frame("Variable" = colnames(EP), "Missings" = rep(NA, vars), "Media" = rep(NA, vars), "Desviacion Estandard" = rep(NA, vars))
for (col in colnames(EP)) {
df <- EP %>% select(col)
NAs <- sum(is.na(df))/nrow(EP)
mean <- mean(as.numeric(unlist(df)), na.rm = T)
sd <- sqrt(var(df, na.rm = T))
descEP[descEP$Variable == col, 2] <- NAs
descEP[descEP$Variable == col, 3] <- mean
descEP[descEP$Variable == col, 4] <- sd
}
EP<-EP %>% select(var_personas)
var_jefe<-c('id','clase','P6090', 'p6240', 'Oficio','p6426', 'p6800', 'P6870',
'P6920', 'P7040')
var_personas<-c('id','clase','P6020', 'P6040', 'P6050', 'P6210',
'P7494','P7505')
EP<-EP %>% select(var_personas)
var_personas<-c('id','clase','P6020', 'P6040', 'P6050', 'P6210',
'P7495','P7505')
EP<-EP %>% select(var_personas)
var_personas<-c('id','Clase','P6020', 'P6040', 'P6050', 'P6210',
'P7495','P7505')
EP<-EP %>% select(var_personas)
Of_jefe<-select(var_jefe)
Of_jefe<-Of_jefe %>% select(var_jefe)
var_jefe<-c('id','Clase','P6090', 'p6240', 'Oficio','p6426', 'p6800', 'P6870',
'P6920', 'P7040')
Of_jefe<-Of_jefe %>% select(var_jefe)
View(descEP_jefe)
var_jefe<-c('id','Clase','P6090', 'P6240', 'Oficio','P6426', 'P6800', 'P6870',
'P6920', 'P7040')
Of_jefe<-Of_jefe %>% select(var_jefe)
View(Of_jefe)
View(Of_jefe)
EP$P7495 = ifelse(EP$P7495 == 1, 1, 0)
ajc = EP %>% group_by(id) %>% summarise(pensiones = sum(P7495))
View(descEP_jefe)
View(TH)
View(TH)
?hotdesk
??hotdesk
